# AutoSRE - Automated Site Reliability Engineering Dashboard

A real-time log monitoring and analysis system with automated insights and error detection.

## 📋 Project Description

AutoSRE is a comprehensive Site Reliability Engineering (SRE) tool that provides real-time monitoring, log analysis, and automated insights for web applications. It features a modern dashboard with WebSocket-based real-time updates, automated error detection, and statistical analysis of application performance.

## 🏗️ Architecture

- **Nginx Server** (Port 8080): Generates access and error logs for monitoring
- **FastAPI Backend** (Port 8000): Analyzes logs and provides real-time insights via WebSocket
- **React Frontend** (Port 3000): Real-time dashboard with WebSocket updates (runs locally)

## 🛠️ Technologies Used

- **Backend**: Python, FastAPI, WebSockets, asyncio
- **Frontend**: React, TypeScript, Tailwind CSS, Vite
- **Infrastructure**: Docker, Docker Compose, Nginx
- **Development**: ESLint, TypeScript, Python linting

## 📁 Project Structure

```
AutoSRE/
├── nginx-logs/
│   ├── Dockerfile              # Nginx container
│   ├── nginx.conf             # Nginx configuration with logging
│   └── logs/                  # Access and error logs
├── backend/
│   ├── Dockerfile             # Python backend container
│   ├── requirements.txt       # Python dependencies
│   └── app/
│       ├── main.py            # FastAPI app with WebSocket support
│       └── __init__.py
├── frontend/
│   ├── Dockerfile             # React frontend container (optional)
│   ├── nginx.conf             # Frontend nginx config
│   ├── package.json           # Node.js dependencies
│   └── src/
│       ├── App.tsx            # Main React app
│       └── components/
│           └── Dashboard.tsx  # Real-time dashboard component
├── docker-compose.yml         # Backend services orchestration
├── traffic_generator.py       # Simulate realistic traffic
├── test_ws.py                 # WebSocket connection test
└── README                     # This file
```

## 🚀 Quick Start

### Prerequisites

- Docker and Docker Compose
- Node.js 18+ and npm (for frontend development)
- Python 3.9+ (for traffic generator and testing)

### 1. Start the Backend Services

```bash
# Build and start backend services (nginx + backend)
docker-compose up --build -d
```

### 2. Start the Frontend (Development Mode)

```bash
# Navigate to frontend directory
cd frontend

# Install dependencies
npm install

# Start development server
npm run dev
```

### 3. Generate Traffic (Optional)

```bash
# In a new terminal, generate realistic traffic
python3 traffic_generator.py
```

### 4. Access the Dashboard

- **Frontend Dashboard:** http://localhost:3000
- **Backend API:** http://localhost:8000
- **Nginx Server:** http://localhost:8080

## 📊 Features

- **Real-time Monitoring:** WebSocket-based live updates every 5 seconds
- **Automated Analysis:** Intelligent log parsing and error detection
- **Error Detection:** Automatic 4xx/5xx error identification and categorization
- **Statistics Dashboard:** Request counts, status code distribution, success rates
- **Modern UI:** React + Tailwind CSS dashboard with real-time connection status
- **Log Parsing:** Automatic parsing of nginx access logs with detailed breakdown

## 🔌 API Endpoints

### HTTP Endpoints

- `GET /health` - Health check
- `GET /get_logs/` - Raw logs
- `GET /get_error_logs/` - Error logs only
- `GET /analyze_logs/` - Log analysis
- `GET /summarize_logs/` - Automated log summary

### WebSocket

- `WS /ws` - Real-time updates with initial data and periodic updates

## 🛠️ Manual Development Guide

### Running Services Individually

#### Backend Development

```bash
# Stop Docker backend
docker-compose stop backend

# Run backend locally
cd backend
pip install -r requirements.txt
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
```

#### Frontend Development

```bash
# Frontend runs locally by default
cd frontend
npm install
npm run dev
```

#### Hybrid Development (Recommended)

```bash
# Start only backend services in Docker
docker-compose up nginx

# Run frontend locally for development
cd frontend
npm run dev
```

### Testing Individual Components

#### Test WebSocket Connection

```bash
# Test WebSocket functionality
python3 test_ws.py
```

#### Test Backend Health

```bash
# Check backend status
curl http://localhost:8000/health

# Test log analysis
curl http://localhost:8000/analyze_logs/
```

#### Test Nginx Endpoints

```bash
# Test nginx endpoints
curl http://localhost:8080/
curl http://localhost:8080/health
curl http://localhost:8080/error
curl http://localhost:8080/notfound
```

## 🔧 Troubleshooting

### Common Issues

#### 1. Port Already in Use

```bash
# Check what's using the port
lsof -i :8000
lsof -i :3000
lsof -i :8080

# Stop conflicting services
docker-compose down
```

#### 2. WebSocket Connection Failed

```bash
# Check backend logs
docker-compose logs backend

# Test WebSocket manually
python3 test_ws.py
```

#### 3. Frontend Build Errors

```bash
# Clean and rebuild
docker-compose down
docker system prune -f
docker-compose up --build
```

#### 4. Frontend Connection Issues

```bash
# Ensure backend is running
docker-compose ps

# Check if backend is accessible
curl http://localhost:8000/health

# Restart backend if needed
docker-compose restart backend
```

### Log Locations

- **Nginx Access Logs:** `./nginx-logs/logs/access.log`
- **Nginx Error Logs:** `./nginx-logs/logs/error.log`
- **Backend Logs:** `docker-compose logs backend`
- **Frontend Logs:** Check browser console and terminal

## 🎯 Development Workflow

### 1. Making Backend Changes

```bash
# Edit backend code
vim backend/app/main.py

# Restart backend only
docker-compose restart backend
```

### 2. Making Frontend Changes

```bash
# Frontend has hot reload - changes appear immediately
# Just save the file and check the browser
```

### 3. Adding New Dependencies

```bash
# Backend
echo "new-package" >> backend/requirements.txt
docker-compose up --build backend

# Frontend
cd frontend
npm install new-package
```

## 📈 Monitoring Dashboard

The dashboard displays:

- **Connection Status:** Real-time WebSocket connection indicator
- **Statistics Cards:** Total requests, success rate, error count, status codes
- **Recent Logs:** Latest 10 log entries with parsing
- **Automated Analysis:** Intelligent insights about log patterns
- **Error Logs:** Filtered 5xx error entries
- **Status Code Distribution:** Visual breakdown of HTTP status codes

## 🔄 Real-time Updates

- **WebSocket Connection:** Automatically connects on page load
- **Update Frequency:** Every 5 seconds
- **Reconnection:** Automatic retry every 5 seconds if disconnected
- **Data Types:** Initial full data, then incremental analysis updates

## 🚀 Production Considerations

For production deployment, consider:

- **Environment Variables:** For API keys and configuration
- **SSL/TLS:** HTTPS for all endpoints
- **Load Balancing:** Multiple backend instances
- **Database:** Persistent storage for logs and metrics
- **Monitoring:** Prometheus + Grafana integration
- **Security:** Network policies and RBAC
- **Frontend Deployment:** Build and serve via nginx or CDN
- **Log Rotation:** Implement log rotation for nginx logs
- **Health Checks:** Add comprehensive health check endpoints

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## 📄 License

This project is open source and available under the MIT License.

## 🆘 Support

For issues and questions:

1. Check the troubleshooting section
2. Review the logs
3. Test individual components
4. Create an issue with detailed information
